#!/usr/bin/perl -w

use strict;
use File::Basename;
use File::Copy;
use File::Spec qw(rel2abs abs2rel);

my $in_file = shift;
my $filter_file = shift;

my $filter_out_folder = "filter";
my $repeatmasker = "./bin/repeatmasker/RepeatMasker";
my %filter, my @unlink, my $current_fasta_file;

my $cpu_count = int(`grep -c processor /proc/cpuinfo`);
my $memory_total = int(`grep -P -o "(?<=(MemTotal:))\\s*\\d+" /proc/meminfo`);
my $blastdb = "db/blastdb";
my $megablast_binary = "blastn -t megablast ";

my $megablast_general_params = "-num_threads $cpu_count -num_descriptions 2 -num_alignments 2 -show_gis -html -evalue 1e-15 -outfmt 5";
my $megablast_align_params = "-reward 2 - penalty -3 -gapopen 2 -gapextend 7";
my $megablast_parameters = $megablast_general_params." ".$megablast_align_params;

#-v number of one-line descriptions to show
#-b number of db seqs to show alingments for
#-I show GIs in deflines
#-T produce HTML output
#-e e-value
#-r reward for a nucleotide match
#-q penalty for mismatch
#-G gap opening cost
#-E gap extension cost
#-m alignment output type: (7: XML)
#my $megablast_parameters = "-num_threads $cpu_count -v2 -b2 -IT -e1e-15 -M20000000 -r2 -q-3 -G5 -E2 -m7";

my $mblast_id_threshold = 90;
my $mblast_cov_threshold = 80;


$| = 1;

if (! defined $in_file)
{
	print "Please supply a FASTA or SFF file as a command line argument for pre-assembly screening!\n";
	exit;
}
my ($in_file_basename, $in_file_path, $in_file_suffix) = fileparse($in_file, (".fasta", ".fna", ".sff"));

$filter_file = "$filter_out_folder/$in_file_basename.filter" if (! defined $filter_file);

# get temp folder
my $tmp_folder = dirname($filter_file) . "/tmp";
mkdir ($tmp_folder) if (! -d $tmp_folder);


my $seq_count;

# getting fasta file if sff
my $repeat_masker_fasta = "$tmp_folder/$in_file_basename.rm.fasta";
if ($in_file_suffix eq ".sff")
{
	if (! -f $repeat_masker_fasta)
	{
		my $seln = "./bin/sff_extract_only_fasta -c -u -s $repeat_masker_fasta $in_file";
		print " $seln\n";
		open(PIPE, "-|", "$seln 2>&1") || die("ERROR: Unable to execut $seln\n");
		while (<PIPE>)
		{
			print "  $_";
			$seq_count = $1 if ( m/into (\d+) sequences/);
		}
		close(PIPE);
	}
}
else
{
	copy($in_file, $repeat_masker_fasta) || die ("ERROR: Unable to copy FASTA file at $in_file to $repeat_masker_fasta!\n");
}
$current_fasta_file = $repeat_masker_fasta;
$seq_count = int(`grep '^>' -c $current_fasta_file`) if (! defined $seq_count);



#
# Running RepeatMasker on all reads
#

my $repeat_masker_filter_file = "$tmp_folder/$in_file_basename.rm.filter";
if (! -f $repeat_masker_filter_file)
{
	my $repeat_masker_masked_output = "$repeat_masker_fasta.masked";
	if (! -f $repeat_masker_masked_output)
	{
		# estimate aprox memory per thread
		my $memory_needed_per_thread = int(get_filesize($current_fasta_file)/1024) * 9;
		my $possible_memory_threads = int($memory_total / $memory_needed_per_thread);
		my $threads = ($cpu_count < $possible_memory_threads) ? $cpu_count : $possible_memory_threads;

		print "INFO: Running RepeatMasker in $threads threads at " . get_timestamp() . "\n";

		my $rmln = File::Spec->rel2abs($repeatmasker) . " -pa $threads -species primates -q " . File::Spec->rel2abs($repeat_masker_fasta);
		my $stage = 0;

		# change dir to run RepeatMasker from temporary folder
		my $current_dir = dirname(File::Spec->rel2abs($0));
		chdir($tmp_folder);

		open(PIPE, "-|", "$rmln 2>&1") || die("ERROR: Unable to execut $rmln\n");
		while (<PIPE>)
		{
			if ( m/(\d+) of (\d+)$/ && $1 > $stage)
			{
				print "\r processing batch $1/$2";
				$stage = $1;
			}
			elsif ( m/^processing output:/ )
			{
				print "\n generating output!\n";
			}
		}
		close(PIPE);

		# change dir back to current directory
		chdir($current_dir);
	}

	print "INFO: Parsing RepeatMasker output at " . get_timestamp() . "\n";

	my %rmfilter;

	open(FILE, $repeat_masker_masked_output) || die("ERROR: Unable to open $repeat_masker_masked_output for input!\n");
	my $key, my $data;
	while (<FILE>)
	{
		if ( m/^>([^\s]+)/ )
		{
			handle_repeatmasker_masked(\%rmfilter, $key, $data) if (defined $key && defined $data);
			$key = $1;
			undef $data;
		}
		elsif (defined $key)
		{
			chomp; $data .= $_;
		}
	}
	handle_repeatmasker_masked(\%rmfilter, $key, $data) if (defined $key && defined $data);
	close(FILE);

	write_filter(\%rmfilter, $repeat_masker_filter_file);

	# clean-up all repeat masker output
	while (<$repeat_masker_fasta.*>)
	{
		unlink($_) if ($_ ne $repeat_masker_masked_output);
	}

	# copy to filter
	$filter{$_} = 1 foreach (keys %rmfilter);
}
else
{
	print "INFO: RepeatMasker filter file already present, remove to re-calculate!\n";
	load_filter(\%filter, $repeat_masker_filter_file);
}

print "INFO: " . (scalar keys %filter) . "/$seq_count reads in filter at " . get_timestamp() . "\n";







#
# Searching with MegaBLAST against Human Genomic
#

my $human_screen_filter_file = "$tmp_folder/$in_file_basename.hg.filter";
if (! -f $human_screen_filter_file)
{
	my $human_screen_fasta = "$tmp_folder/$in_file_basename.hg.fasta";

	if (! -f $human_screen_fasta)
	{
		print "INFO: Creating a filtered FASTA file for screening against Human Genomic at " . get_timestamp() . "\n";
		filter_fasta(\%filter, $current_fasta_file, $human_screen_fasta);
	}

	my %hgfilter;

	print "INFO: Running MegaBLAST against Human Genomic database at " . get_timestamp() . "\n";


	my $mblastout_file = "$tmp_folder/$in_file_basename.hg.megablast";
	my $mblastwarn_file = "$tmp_folder/$in_file_basename.hg.warn";
	my $mblastln = "$megablast_binary $megablast_parameters -db $blastdb/human_genomic/human_genomic -query $human_screen_fasta";
	open(OUT, ">", $mblastout_file) || die("ERROR: Unable to open $mblastout_file for output!\n");
	open(BLASTPIPE, "-|", "$mblastln 2>$mblastwarn_file") || die("ERROR: Unable to run $mblastln!\n");
	while (<BLASTPIPE>)
	{
		process_blast_xmloutput_iteration(*BLASTPIPE, *OUT, \%hgfilter, 2, 1) if ( m/^\s*<Iteration>\s*$/ || m/^\s*<BlastOutput>\s*$/);
	}
	close(BLASTPIPE);
	close(OUT);

	my $wcount = load_blast_warnings_into_filter(\%hgfilter, $mblastwarn_file);
	print "INFO: $wcount entries added to filter from BLAST warnings!\n" if ($wcount);
	unlink($mblastwarn_file) if (! $wcount);

	write_filter(\%hgfilter, $human_screen_filter_file);

	# copy to filter
	$filter{$_} = 1 foreach (keys %hgfilter);

	$current_fasta_file = $human_screen_fasta;

	push(@unlink, $human_screen_fasta);
}
else
{
	print "INFO: Human Genomc screen filter file already present, remove to re-calculate!\n";
	load_filter(\%filter, $human_screen_filter_file);
}

print "INFO: " . (scalar keys %filter) . "/$seq_count reads in filter at " . get_timestamp() . "\n";





#
# Searching with MegaBLAST against Human Transcripts
#

my $ht_screen_filter_file = "$tmp_folder/$in_file_basename.ht.filter";
if (! -f $ht_screen_filter_file)
{
	my $ht_screen_fasta = "$tmp_folder/$in_file_basename.ht.fasta";

	if (! -f $ht_screen_fasta)
	{
		print "INFO: Creating a filtered FASTA file for screening against Human Transcripts at " . get_timestamp() . "\n";
		filter_fasta(\%filter, $current_fasta_file, $ht_screen_fasta);
	}

	my %htfilter;

	print "INFO: Running MegaBLAST against Human Transcripts database at " . get_timestamp() . "\n";

	my $mblastout_file = "$tmp_folder/$in_file_basename.ht.megablast";
	my $mblastwarn_file = "$tmp_folder/$in_file_basename.ht.warn";
	my $mblastln = "$megablast_binary $megablast_parameters -d$blastdb/human_genomic_transcript/human_genomic_transcript -i$ht_screen_fasta";
	open(OUT, ">", $mblastout_file) || die("ERROR: Unable to open $mblastout_file for output!\n");
	open(BLASTPIPE, "-|", "$mblastln 2>$mblastwarn_file") || die("ERROR: Unable to run $mblastln!\n");
	while (<BLASTPIPE>)
	{
		process_blast_xmloutput_iteration(*BLASTPIPE, *OUT, \%htfilter, 2, 1) if ( m/^\s*<Iteration>\s*$/ || m/^\s*<BlastOutput>\s*$/);
	}
	close(BLASTPIPE);
	close(OUT);

	my $wcount = load_blast_warnings_into_filter(\%htfilter, $mblastwarn_file);
	print "INFO: $wcount entries added to filter from BLAST warnings!\n" if ($wcount);
	unlink($mblastwarn_file) if (! $wcount);

	write_filter(\%htfilter, $ht_screen_filter_file);

	# copy to filter
	$filter{$_} = 1 foreach (keys %htfilter);

	$current_fasta_file = $ht_screen_fasta;

	push(@unlink, $ht_screen_fasta);
}
else
{
	print "INFO: Human Transcripts screen filter file already present, remove to re-calculate!\n";
	load_filter(\%filter, $ht_screen_filter_file);
}

print "INFO: " . (scalar keys %filter) . "/$seq_count reads in filter at " . get_timestamp() . "\n";












# cleanup
unlink($_) foreach (@unlink);



# load all filters
print "INFO: Loading all filter files\n";
while (<$tmp_folder/$in_file_basename.*.filter>)
{
	print " loading $_\n";
	load_filter(\%filter, $_);
}

# write result filter
print "INFO: Writing filter to $filter_file\n";
write_filter(\%filter, $filter_file);

print "DONE: Good bye.\n\n";


#
# FUNCTIONS
#

sub handle_repeatmasker_masked
{
	my $filter_hash = shift;
	my $key = shift;
	my @data = split(//, shift );

	my $ncount = 0, my $score = 0, my $start = 0, my $max;

	for (0..$#data)
	{
		if ($score < 0)
		{
			$score = 0;
			$start = $_;
		}

		my $ps = $data[$_] ne 'N' && $data[$_] ne 'n' ? 1 : -5;
		++$ncount if ($ps < 0);
		
		$score += $ps;
		$max = [$score, $start, $_] if (! defined $max->[0] || $score > $max->[0]);
	}
	
	my $len = scalar @data;
	my $nreplen = defined $max ? $max->[2] - $max->[1] + 1 : 0;

	# more than 70% are N 
	# or the longest fairly unmasked stretch is less than 50 bp long
	if ($ncount > ($len * 0.7) || $nreplen < 50)
	{
		$filter_hash->{$key} = 1;
	}
}

sub get_timestamp
{	
	my ($sec,$min,$hour,$mday,$mon,$year) = localtime(time);
	return sprintf("%04d-%02d-%02d %02d:%02d:%02d", 
		1900+$year, 1+$mon, $mday, $hour, $min, $sec);
}

sub write_filter
{
	my $hash = shift, my $file = shift;

	my @filtered = sort (keys %$hash);
	open(OUT, ">", $file) || die("ERROR: Unable to open $file for output!\n");
	print OUT join("\n", @filtered);
	close(OUT);
}

sub load_filter
{
	my $hash = shift, my $file = shift;

	open(FILE, $file) || die("ERROR: Unable to open $file for input!\n");
	while (<FILE>)
	{
		$hash->{$1} = 1 if ( m/^([^\s]+)/ );
	}
	close(FILE);
}

sub filter_fasta
{
	my $filter_hash = shift, my $fasta_file = shift, my $out_file = shift;

	open(FILE, $fasta_file) || die("ERROR: Unable to open $fasta_file for input!\n");
	open(OUT, ">", $out_file) || die("ERROR: Unable to open $out_file for output!\n");
	my $w = 1;
	while (<FILE>)
	{
		$w = ! defined $filter_hash->{$1} if ( m/^>([^\s]+)/ );
		print OUT if ($w);
	}
	close(OUT);
	close(FILE);

}

sub load_blast_warnings_into_filter
{
	my $hash = shift, my $file = shift, my $count = 0;

	open(FILE, $file) || die("ERROR: Unable to open $file for input!\n");
	while (<FILE>)
	{
		if ( m/WARNING: ([^:]+): Could not calculate ungapped Karlin-Altschul/)
		{
			$hash->{$1} = 1;
			++$count;			
		}
	}
	close(FILE);

	return $count;
}






sub process_blast_xmloutput_iteration
{
	my $blastpipe = shift, my $out_file = shift, my $filter_hash = shift;
	my $max_output_count = shift, my $mblast_join_hsps_on_hit = shift;

	# read iteration summary
	my $qdef, my $qkey, my $qlen;
	while (<$blastpipe>)
	{
		$qdef = $2 if ( m/<(Iteration_query-def|BlastOutput_query-def)>(.+?)<\/\1>/);
		$qlen = $2 if ( m/<(Iteration_query-len|BlastOutput_query-len)>(.+?)<\/\1>/);
		last if ( m/<Iteration_hits>/);
		return if ( m/<\/Iteration>/);
	}
	$qdef =~ s/\s+/ /;
	$qdef =~ s/ length=\d+//;
	$qkey = $qdef =~ m/^([^\s]+)/ ? $1 : $qdef;

	my $current_hit_num;
	my @hsps;
	my %hits;

	# read hits
	while (<$blastpipe>)
	{
		if ( m/<Hit>/)
		{
			my %hit_nfo;
			while (<$blastpipe>)
			{
				last if ( m/<Hit_hsps>/);
				$hit_nfo{$1} = $2 if ( m/<Hit_([^>]+)>(.+?)<\/Hit_\1>/);
			}
			$current_hit_num = $hit_nfo{"num"};
			$hits{$current_hit_num} = \%hit_nfo if (defined $current_hit_num);
		}
		elsif (defined $current_hit_num && m/<Hsp>/)
		{
			my %hsp = ("hit-id" => $current_hit_num);
			while (<$blastpipe>)
			{
				last if ( m/<\/Hsp>/);
				$hsp{$1} = $2 if ( m/<Hsp_([^>]+)>(.+?)<\/Hsp_\1>/);
			}
			# order query from..to to always be a forward range
			my $qf = $hsp{'query-from'}; 
			my $qt = $hsp{'query-to'};
			$hsp{'query-from'} = $qf < $qt ? $qf : $qt;
			$hsp{'query-to'} = $qf < $qt ? $qt : $qf;
			$hsp{'qalign-len'} = 1 + $hsp{'query-to'} - $hsp{'query-from'};
			$hsp{'salign-len'} = 1 + $hsp{'hit-to'} - $hsp{'hit-from'};

			# calculate %id, %cov
			$hsp{'pid'} = $hsp{'identity'} * 100 / $hsp{'qalign-len'};
			$hsp{'pcov'} = $hsp{'qalign-len'} *100 / $qlen;

			# add to filter if above threshold
			$filter_hash->{$qkey} = 1 if ($hsp{'pid'} >= $mblast_id_threshold && $hsp{'pcov'} >= $mblast_cov_threshold);

			push(@hsps, \%hsp);
		}
		elsif ( m/^\s*<\/Iteration>\s*$/)
		{
			last;
		}
	}

	if ($mblast_join_hsps_on_hit)
	{
		my @joined_hsps;
		my $i = 0;
		while ($i <= $#hsps)
		{
			my %hi = %{$hsps[$i]};
			push(@joined_hsps, $hsps[$i]);

			# check if possible to join with entries bellow
			my $stop;			
			for ($i+1..$#hsps)
			{
				my %test = %{$hsps[$_]};
				if ($hi{'hit-id'} == $test{'hit-id'})
				{
					$stop = $_;
				}
				else
				{
					last;
				}
			}

			if (defined $stop)
			{
				$hsps[$i]->{'multiple-hits'} = [ $hsps[$i] ];

				# derive positions of identity
				my %qid, my @ml = split(//, $hsps[$i]->{'midline'}), my $qo = $hsps[$i]->{'query-from'};
				for (0..$#ml) { $qid{$qo+$_} = 1 if ($ml[$_] =~ m/[A-Z\|]/); }

				for ($i+1..$stop)
				{
					$hsps[$i]->{'query-from'} = $hsps[$_]->{'query-from'} if ($hsps[$_]->{'query-from'} < $hsps[$i]->{'query-from'});
					$hsps[$i]->{'query-to'} = $hsps[$_]->{'query-to'} if ($hsps[$_]->{'query-to'} > $hsps[$i]->{'query-to'});
					$hsps[$i]->{'scores'} .= ";" . $hsps[$_]->{'score'};
					$hsps[$i]->{'bit-scores'} .= ";" . $hsps[$_]->{'bit-score'};

					# set positions of identity
					@ml = split(//, $hsps[$_]->{'midline'}); $qo = $hsps[$_]->{'query-from'};
					for (0..$#ml) { $qid{$qo+$_} = 1 if ($ml[$_] =~ m/[A-Z\|]/); }

					push(@{$hsps[$i]->{'multiple-hits'}}, $hsps[$_]);
				}


				$hsps[$i]->{'identity'} = scalar keys %qid;
				$hsps[$i]->{'qalign-len'} = 1 + $hsps[$i]->{'query-to'} - $hsps[$i]->{'query-from'};
				$hsps[$i]->{'pid'} = $hsps[$i]->{'identity'} * 100 / $hsps[$i]->{'qalign-len'};
				$hsps[$i]->{'pcov'} = $hsps[$i]->{'qalign-len'} * 100 / $qlen;
				$hsps[$i]->{'parts'} = 1+$stop-$i;

				$filter_hash->{$qkey} = 1 if ($hsps[$i]->{'pid'} >= $mblast_id_threshold && $hsps[$i]->{'pcov'} >= $mblast_cov_threshold);

				$i = $stop;
			}
			++$i;
		}
		@hsps = @joined_hsps;
	}


	if ($max_output_count > 0 && defined $out_file)
	{
		my $count = 0;
		print $out_file ">$qdef length=$qlen\n";
		foreach (sort { $b->{'bit-score'} <=> $a->{'bit-score'} } (@hsps))
		{
			my %hit = %{$hits{$_->{'hit-id'}}};
			printf $out_file "n#e=%g,s=%.2f,id=%.1f%%,cov=%.1f%%#>%s\n", 
				$_->{'evalue'}, $_->{'bit-score'}, $_->{'pid'}, $_->{'pcov'}, 
				$hit{'id'} =~ m/^gnl\|BL_ORD_ID/ ? $hit{'def'} : "$hit{'id'} $hit{'def'}";

			last if (++$count >= $max_output_count);
		}
	}
}


sub get_filesize
{
	my $file = shift;
	return -s $file;
}

