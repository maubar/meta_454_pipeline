#!/usr/bin/perl -w

use strict;
use File::Basename;

my $result_file = shift;
my $out_folder = shift;

my $tax_div_pattern = "VRL|PHG";
my $tax_div_bans = "SYN|ENV";
my $hit_score_threshold = 0.90; 					# score relative to max-score which is relevant to family designation

if (! defined $result_file)
{
	print STDERR "Please supply a valid bs-file as a command line argument!\n";
	exit(1);
}

# settings
my $node_base = 10239;
my $rank = "family";
my $taxdb = "taxdb/";
my $result_folder_sufix = "vf";

# get analyze_folder and out_folder if non was supplied
my $analyze_folder = dirname($result_file) . "/analyze/";
my %short2long = ("A" => "ambiguous", "B" => "bacterial", "E" => "environmental", "M" => "mammalian", "O" => "other", "P" => "phage", "U" => "unknown", "V" => "viral");
$out_folder = defined $out_folder ? $out_folder : ($result_file =~ m/\.([A-Z])\.(bs|txt)/ && defined $short2long{$1} ? $short2long{$1} . "-$result_folder_sufix"  : $result_folder_sufix);
$out_folder = substr($out_folder, length($analyze_folder)) if (index($out_folder, $analyze_folder) == 0);
$out_folder .= "/" if ($out_folder !~ m/\/$/ );
mkdir($analyze_folder) if (! -d $analyze_folder);




print STDERR "INFO: Loading taxonomy tree.\n";
my $nodes = load_tax_nodes($taxdb);


print STDERR "INFO: Creating viral $rank taxonomy lookup.\n";
my $families = get_nodes_by_rank($rank, $nodes, $node_base);
my %lookup;
foreach my $fid (@$families)
{
	$lookup{$fid} = $fid;
	$lookup{$_} = $fid foreach (@{ get_all_children($nodes, $fid) });
}



print STDERR "INFO: Processing $result_file.\n";

my $fdata = {};
my $work_folder = "$analyze_folder$out_folder";
mkdir($work_folder) if (! -d $work_folder);

# reading resuls file
my %stats;
open(F, $result_file) || die("ERROR: Unable to open $result_file for input!\n");
my $h, my $d;
while (<F>)
{
	chomp;
	if ( m/^>/ )
	{
		handle_results($fdata, $h, $d, \%stats) if (defined $h && defined $d);
		$h = $_; undef $d; next;
	}
	push(@$d, $_);
}
handle_results($fdata, $h, $d, \%stats) if (defined $h && defined $d);
close(F);

#print stats
print "#seq\treads\tname\n";
printf "%d\t%d\t%s\n", $stats{$_}[0], $stats{$_}[1], famid2name($_, $nodes) foreach (sort { ($b > 0 ? $stats{$b}[0] : $b) <=> ($a > 0 ? $stats{$a}[0] : $a) } (keys %stats));

# close all files
close foreach(values %$fdata);

print STDERR "INFO: Identity sorting output!\n";

# identity sort result files
my $id_sort_folder = $work_folder . "id-sort/";
mkdir($id_sort_folder) if (! -d $id_sort_folder);
foreach my $famid (keys %$fdata)
{
	my $fn = get_file_name($famid, $nodes);
	my $ln = "./bin/bs_idsort $work_folder$fn > $id_sort_folder$fn";
	if (system($ln) != 0)
	{
		if ($? == -1) { print STDERR "failed to execute ./bin/bs_idsort: $!\n"; }
		elsif ($? & 127) { printf STDERR "./bin/bs_idsort died with signal %d, %s coredump\n", ($? & 127), ($? & 128) ? 'with' : 'without'; }
		else { print STDERR "./bin/bs_idsort exited with value %d\n", $? >> 8; }
		die;
	}
}

print STDERR "INFO: E-value sorting output!\n";

# e-value sort result files
my $e_sort_folder = $work_folder . "e-sort/";
mkdir($e_sort_folder) if (! -d $e_sort_folder);
foreach my $famid (keys %$fdata)
{
	my $fn = get_file_name($famid, $nodes);
	my $ln = "./bin/bs_esort $work_folder$fn > $e_sort_folder$fn";
	if (system($ln) != 0)
	{
		if ($? == -1) { print STDERR "failed to execute ./bin/bs_esort: $!\n"; }
		elsif ($? & 127) { printf STDERR "./bin/bs_esort died with signal %d, %s coredump\n", ($? & 127), ($? & 128) ? 'with' : 'without'; }
		else { print STDERR "./bin/bs_esort exited with value %d\n", $? >> 8; }
		die;
	}
}

# no exec bellow these lines
print STDERR "DONE: All done, good bye!\n";
exit(0);


#
# functions
#

sub handle_results
{
	my $fdata = shift, my $h = shift , my $d = shift, my $stats = shift;

	my $unclassified_famid = 0;
	my $non_viral_famid = -1;
	my $ambiguous_famid = -2;

	# process all results and fetch score, tax-id, family tax-id
	my %results, my $max_score = 0;
	foreach (@$d)
	{
		if ( m/[#,]s=([\d\.]+).+?dt\|([A-Z]{3})\.(\d+)/ )
		{
			my ($score, $div, $taxid) = ($1, $2, $3) ; $max_score = $score if ($score > $max_score);
			my $is_viral_hit = $div =~ m/$tax_div_pattern/ ? 1 : 0;
			my $famid = $is_viral_hit ? (defined $lookup{$taxid} ? $lookup{$taxid} : $unclassified_famid) : $non_viral_famid;
			my $is_banned_div = $div =~ m/$tax_div_bans/ ? 1 : 0;
			$results{$famid} = [$score, $is_banned_div, $taxid] if (! defined $results{$famid} || $score > $results{$famid});
			#print "match: $score, $div, $taxid, $famid, $_\n";
		}
		#else { print "no-match: $_\n"; }
	}

	# store families within threshold
	my $thres = $max_score * $hit_score_threshold;
	my @families; my @rk = sort { $results{$b}[0] <=> $results{$a}[0] } (keys %results);
	foreach (@rk)
	{
		# skip banned divions
		if (! $results{$_}[1])
		{
			my $s = $results{$_}[0];
			push(@families, $_) if ($s >= $thres);
		}
	}

	# get family-id: 1 => choose that one, 2 => ambigious, 0 => none viral hit within threshold, thus non-viral
	my $famid = scalar @families == 1 ? $families[0] : (scalar @families > 1 ? $ambiguous_famid : $non_viral_famid);

	# assert and open file for family-id	
	if (! defined $fdata->{$famid})
	{
		# get file-name
		my $fn = get_file_name($famid, $nodes), my $fh;
		# open file and store file handle
		open($fh, ">", "$work_folder$fn") || die("ERROR: Unable to open $work_folder$fn for output!\n");
		$fdata->{$famid} = $fh;
	}

	# add reason to ambiguity
	if ( $famid == $ambiguous_famid )
	{
		my @names; push(@names, famid2name($_, $nodes) . "(" . $results{$_}[0] . ")") foreach (@families);
		$h .= " families=" . join(";", @names);
	}
	# add reason for non-viral
	elsif ( $famid == $non_viral_famid )
	{
		my @names; push(@names, famid2name($_, $nodes) . "(" . $results{$_}[0] . ")") foreach (@rk);
		$h .= " families=" . join(";", @names);
	}
	# add family taxonomy identifier for which no family was found
	elsif ( $famid == $unclassified_famid )
	{
		$h .= " family-tax-id=" . $results{$famid}[2];  
	}
	
	print { $fdata->{$famid} } "$h\n" . join("\n", @$d) . "\n";

	$$stats{$famid}[0] += 1;
	$$stats{$famid}[1] += ($h =~ m/(reads|num.frags)=(\d+)/ ? $2 : 1);
}

sub get_file_name
{
	my $famid = shift, my $nodes = shift;
	my $fn = famid2name($famid, $nodes), my $fh;
	$fn = lc($fn); $fn =~ s/\W+/./g;
	return "$fn.txt";
}

sub famid2name
{
	my $famid = shift, my $nodes = shift;
	my $unclassified_famid = 0;
	my $non_viral_famid = -1;
	my $ambiguous_famid = -2;

	my $fn;
	if ($famid > 0)
	{
		$fn = $nodes->{$famid}[1];
	}
	elsif ($famid == $non_viral_famid)
	{
		$fn = "Unassigned Non-Viral";
	}
	elsif ($famid == $ambiguous_famid)
	{
		$fn = "Unassigned Ambiguous";
	}
	elsif ($famid == $unclassified_famid)
	{
		$fn = "Unassigned Unclassified";
	}
	return $fn;
}

sub get_nodes_by_rank
{
	my $rank = shift, my $nodes = shift, my $id = shift;
	return [] if ( ! defined $nodes->{$id}[3]);
	my $list = [];
	foreach (@{$nodes->{$id}[3]})
	{
		push(@$list, $_) if ($nodes->{$_}[2] eq $rank);
		push(@$list, $_) foreach (@{ get_nodes_by_rank($rank, $nodes, $_)});
	}
	return $list;
}

sub get_all_children
{
	my $nodes = shift, my $id = shift;
	return [] if ( ! defined $nodes->{$id}[3]);
	my $list = [];
	foreach (@{$nodes->{$id}[3]})
	{
		push(@$list, $_);
		push(@$list, $_) foreach (@{ get_all_children($nodes, $_)});
	}
	return $list;
}

sub load_tax_nodes
{
	my $taxdb = shift; $taxdb .= "/" if (! $taxdb =~ m/\/$/);
	my $nodes_file = "nodes.dmp";
	my $names_file = "names.dmp";

	my $nodes = {};

	if (-f "$taxdb$nodes_file.gz") { open(F, "-|", "zcat $taxdb$nodes_file.gz") || die("ERROR: Unable to open $taxdb$nodes_file.gz through zcat!\n"); }
	elsif (-f "$taxdb$nodes_file") { open(F, "$taxdb$nodes_file") || die("ERROR: Unable to open $taxdb$nodes_file for intput!\n"); }
	else { die("ERROR: Unable to locate $taxdb$nodes_file!\n"); }
	while (<F>)
	{
		my ($id, $pid, $rank, $embl, $did)= split(/\s*\|\s*/);
		my $name;
		$nodes->{$id}[0] = $pid;
		$nodes->{$id}[1] = $name;
		$nodes->{$id}[2] = $rank;
		push(@{$nodes->{$pid}[3]}, $id);
	}
	close(F);
	
	if (-f "$taxdb$names_file.gz") { open(F, "-|", "zcat $taxdb$names_file.gz") || die("ERROR: Unable to open $taxdb$names_file.gz through zcat!\n"); }
	elsif (-f "$taxdb$names_file") { open(F, "$taxdb$names_file") || die("ERROR: Unable to open $taxdb$names_file for intput!\n"); }
	else { die("ERROR: Unable to locate $taxdb$names_file!\n"); }
	my $lid = -1, my $lrnk = 0;
	while (<F>)
	{
		my ($id, $name, $uname, $class)= split(/\s*\|\s*/);
		my $rnk = get_class_rank($class);
		if ($id != $lid || $rnk > $lrnk)
		{
			$nodes->{$id}[1] = $name;
			$lid = $id; $lrnk = $rnk;
		}
	}
	close(F);

	return $nodes;
}

sub get_class_rank
{
	my $class = shift;
	return 0 if (! defined $class);
	my %rank = ("scientific name" => 4, "genbank common name" => 3, "common name" => 1, "synonym" => 0);
	return defined $rank{$class} ? $rank{$class} : 2;
}
